"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[4854],{4854:e=>{e.exports="import {NgForOf, NgIf} from '@angular/common';\nimport {Component, inject} from '@angular/core';\nimport {FormControl} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {TUI_IS_E2E, TuiItemDirective} from '@taiga-ui/cdk';\nimport {TuiLinkDirective, TuiSvgComponent} from '@taiga-ui/core';\nimport type {TuiFileLike} from '@taiga-ui/kit';\nimport {TuiFileComponent, TuiFilesComponent} from '@taiga-ui/kit';\n\n@Component({\n    standalone: true,\n    exportAs: \"ExampleComponent3\",\n    imports: [\n        TuiFilesComponent,\n        TuiFileComponent,\n        NgForOf,\n        NgIf,\n        TuiItemDirective,\n        TuiLinkDirective,\n        TuiSvgComponent,\n    ],\n    templateUrl: './index.html',\n    encapsulation,\n    changeDetection,\n})\nexport default class ExampleComponent {\n    protected readonly isE2E = inject(TUI_IS_E2E);\n\n    protected readonly control = new FormControl<TuiFileLike | null>(null);\n\n    protected readonly files: readonly TuiFileLike[] = [\n        {\n            name: 'Loaded.txt',\n        },\n        {\n            name: 'A file with a very very long title to check that it can be cut correctly.txt',\n        },\n    ];\n\n    protected loadingFile: TuiFileLike | null = {\n        name: 'Loading file.txt',\n    };\n\n    protected readonly rejectedFiles: readonly TuiFileLike[] = [\n        {\n            name: 'File with an error.txt',\n            content: 'Something went wrong this time',\n        },\n    ];\n\n    protected readonly fileWithLink: TuiFileLike = {\n        name: 'with link.txt',\n        src: 'https://tools.ietf.org/html/rfc675',\n    };\n\n    protected removedFiles: TuiFileLike[] = [this.loadingFile as unknown as TuiFileLike];\n    protected restoredFiles: TuiFileLike[] = [];\n\n    protected removeLoading(): void {\n        this.loadingFile = null;\n    }\n\n    protected restore(file: TuiFileLike | null): void {\n        if (!file) {\n            return;\n        }\n\n        this.restoredFiles = [...this.restoredFiles, file];\n        this.removedFiles = this.removedFiles.filter(\n            removed => file.name !== removed?.name,\n        );\n    }\n\n    protected remove(file: TuiFileLike): void {\n        this.removedFiles = [...this.removedFiles, file];\n        this.restoredFiles = this.restoredFiles.filter(\n            restored => file.name !== restored?.name,\n        );\n    }\n}\n"}}]);