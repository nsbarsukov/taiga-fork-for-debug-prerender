"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[38592],{38592:e=>{e.exports="import {AsyncPipe, NgForOf} from '@angular/common';\nimport {Component} from '@angular/core';\nimport type {AbstractControl, ValidatorFn} from '@angular/forms';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {TuiValidationError} from '@taiga-ui/cdk';\nimport {TuiErrorComponent} from '@taiga-ui/core';\nimport {\n    TuiFieldErrorPipe,\n    TuiFileComponent,\n    TuiFileRejectedPipe,\n    tuiFilesAccepted,\n    TuiFilesComponent,\n    TuiInputFilesComponent,\n    TuiInputFilesDirective,\n} from '@taiga-ui/kit';\nimport {map} from 'rxjs';\n\n@Component({\n    standalone: true,\n    exportAs: \"ExampleComponent2\",\n    imports: [\n        TuiInputFilesComponent,\n        TuiInputFilesDirective,\n        ReactiveFormsModule,\n        TuiFilesComponent,\n        TuiFileComponent,\n        NgForOf,\n        AsyncPipe,\n        TuiErrorComponent,\n        TuiFieldErrorPipe,\n        TuiFileRejectedPipe,\n    ],\n    templateUrl: './index.html',\n    encapsulation,\n    changeDetection,\n})\nexport default class ExampleComponent {\n    protected readonly control = new FormControl<File[]>([], [maxFilesLength(5)]);\n    protected readonly accepted$ = this.control.valueChanges.pipe(\n        map(() => tuiFilesAccepted(this.control)),\n    );\n\n    protected rejected: readonly File[] = [];\n\n    protected onReject(files: readonly File[]): void {\n        this.rejected = Array.from(new Set(this.rejected.concat(files)));\n    }\n\n    protected onRemove(file: File): void {\n        this.rejected = this.rejected.filter(rejected => rejected !== file);\n        this.control.setValue(\n            this.control.value?.filter(current => current !== file) ?? [],\n        );\n    }\n}\n\nexport function maxFilesLength(maxLength: number): ValidatorFn {\n    return ({value}: AbstractControl) =>\n        value.length > maxLength\n            ? {\n                  maxLength: new TuiValidationError(\n                      'Error: maximum limit - 5 files for upload',\n                  ),\n              }\n            : null;\n}\n"}}]);