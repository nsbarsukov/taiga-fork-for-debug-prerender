"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[39215],{39215:e=>{e.exports="import {AsyncPipe} from '@angular/common';\nimport {Component} from '@angular/core';\nimport {FormControl, FormGroup, ReactiveFormsModule, Validators} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {tuiIsFalsy} from '@taiga-ui/cdk';\nimport {\n    TuiErrorComponent,\n    TuiLabelDirective,\n    TuiTextfieldOptionsDirective,\n} from '@taiga-ui/core';\nimport {TUI_VALIDATION_ERRORS, TuiFieldErrorPipe} from '@taiga-ui/kit';\nimport {\n    TuiInputModule,\n    TuiInputNumberModule,\n    TuiTextfieldControllerModule,\n} from '@taiga-ui/legacy';\nimport {interval, map, of, scan, startWith} from 'rxjs';\n\n@Component({\n    standalone: true,\n    exportAs: \"ExampleComponent2\",\n    imports: [\n        ReactiveFormsModule,\n        TuiLabelDirective,\n        TuiInputModule,\n        TuiTextfieldOptionsDirective,\n        TuiTextfieldControllerModule,\n        TuiErrorComponent,\n        TuiFieldErrorPipe,\n        AsyncPipe,\n        TuiInputNumberModule,\n    ],\n    templateUrl: './index.html',\n    encapsulation,\n    changeDetection,\n    providers: [\n        {\n            provide: TUI_VALIDATION_ERRORS,\n            useValue: {\n                required: 'Enter this!',\n                email: 'Enter a valid email',\n                maxlength: ({requiredLength}: {requiredLength: string}) =>\n                    `Maximum length \u2014 ${requiredLength}`,\n                minlength: ({requiredLength}: {requiredLength: string}) =>\n                    of(`Minimum length \u2014 ${requiredLength}`),\n                min: interval(2000).pipe(\n                    scan(tuiIsFalsy, false),\n                    map(val => (val ? 'Fix please' : 'Min number 3')),\n                    startWith('Min number 3'),\n                ),\n            },\n        },\n    ],\n})\nexport default class ExampleComponent {\n    protected readonly testValue1 = new FormControl('', [\n        Validators.minLength(4),\n        Validators.maxLength(4),\n    ]);\n\n    protected readonly testValue2 = new FormControl('', [\n        Validators.required,\n        Validators.email,\n    ]);\n\n    protected readonly testValue3 = new FormControl(2, [Validators.min(3)]);\n\n    protected readonly testForm = new FormGroup({\n        testValue1: this.testValue1,\n        testValue2: this.testValue2,\n        testValue3: this.testValue3,\n    });\n\n    constructor() {\n        this.testValue1.valueChanges.subscribe(() => {\n            this.testValue1.markAsTouched();\n        });\n    }\n}\n"}}]);