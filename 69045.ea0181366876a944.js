(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[69045],{69045:e=>{e.exports="import {AsyncPipe, NgIf} from '@angular/common';\nimport {Component} from '@angular/core';\nimport {FormControl, ReactiveFormsModule} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport type {TuiFileLike} from '@taiga-ui/kit';\nimport {\n    TuiFileComponent,\n    TuiFileRejectedPipe,\n    TuiFilesComponent,\n    TuiInputFilesComponent,\n    TuiInputFilesDirective,\n} from '@taiga-ui/kit';\nimport type {Observable} from 'rxjs';\nimport {finalize, map, of, Subject, switchMap, timer} from 'rxjs';\n\n@Component({\n    standalone: true,\n    exportAs: \"ExampleComponent1\",\n    imports: [\n        NgIf,\n        TuiInputFilesComponent,\n        ReactiveFormsModule,\n        TuiInputFilesDirective,\n        TuiFilesComponent,\n        TuiFileComponent,\n        TuiFileRejectedPipe,\n        AsyncPipe,\n    ],\n    templateUrl: './index.html',\n    encapsulation,\n    changeDetection,\n})\nexport default class ExampleComponent {\n    protected readonly control = new FormControl<TuiFileLike | null>(null);\n    protected readonly failedFiles$ = new Subject<TuiFileLike | null>();\n    protected readonly loadingFiles$ = new Subject<TuiFileLike | null>();\n    protected readonly loadedFiles$ = this.control.valueChanges.pipe(\n        switchMap(file => this.processFile(file)),\n    );\n\n    protected removeFile(): void {\n        this.control.setValue(null);\n    }\n\n    protected processFile(file: TuiFileLike | null): Observable<TuiFileLike | null> {\n        this.failedFiles$.next(null);\n\n        if (this.control.invalid || !file) {\n            return of(null);\n        }\n\n        this.loadingFiles$.next(file);\n\n        return timer(1000).pipe(\n            map(() => {\n                if (Math.random() > 0.5) {\n                    return file;\n                }\n\n                this.failedFiles$.next(file);\n\n                return null;\n            }),\n            finalize(() => this.loadingFiles$.next(null)),\n        );\n    }\n}\n"}}]);