(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[63114],{63114:e=>{e.exports="import {AsyncPipe, NgForOf, NgIf} from '@angular/common';\nimport type {QueryList} from '@angular/core';\nimport {Component, ElementRef, ViewChild, ViewChildren} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport {assets} from '@demo/utils';\nimport type {TuiBooleanHandler} from '@taiga-ui/cdk';\nimport {EMPTY_QUERY, tuiPure} from '@taiga-ui/cdk';\nimport {\n    TuiDataListComponent,\n    TuiDriver,\n    TuiDropdownDirective,\n    TuiDropdownSelectionDirective,\n    tuiGetWordRange,\n    TuiInitialsPipe,\n    TuiOptionComponent,\n} from '@taiga-ui/core';\nimport {TuiAvatarComponent} from '@taiga-ui/kit';\nimport {TuiTextareaModule} from '@taiga-ui/legacy';\nimport type {Observable} from 'rxjs';\n\nexport interface User {\n    readonly avatar: string;\n    readonly login: string;\n    readonly name: string;\n}\n\n@Component({\n    standalone: true,\n    exportAs: \"ExampleComponent2\",\n    imports: [\n        TuiTextareaModule,\n        TuiDropdownSelectionDirective,\n        TuiDropdownDirective,\n        FormsModule,\n        AsyncPipe,\n        TuiDataListComponent,\n        NgIf,\n        NgForOf,\n        TuiOptionComponent,\n        TuiAvatarComponent,\n        TuiInitialsPipe,\n    ],\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    encapsulation,\n    changeDetection,\n})\nexport default class ExampleComponent {\n    @ViewChildren(TuiOptionComponent, {read: ElementRef})\n    private readonly options: QueryList<ElementRef<HTMLElement>> = EMPTY_QUERY;\n\n    @ViewChild(TuiDriver)\n    protected readonly driver?: Observable<boolean>;\n\n    protected value = 'Type @ to see a dropdown';\n\n    protected readonly items = [\n        {\n            name: 'Alexander Inkin',\n            avatar: assets`/images/avatar.jpg`,\n            login: 'a.inkin',\n        },\n        {\n            name: 'Roman Sedov',\n            avatar: '',\n            login: 'r.sedov',\n        },\n    ];\n\n    protected predicate: TuiBooleanHandler<Range> = range =>\n        tuiGetWordRange(range).toString().startsWith('@');\n\n    protected onArrow(event: Event, which: 'first' | 'last'): void {\n        const item = this.options[which];\n\n        if (!item) {\n            return;\n        }\n\n        event.preventDefault();\n        item.nativeElement.focus();\n    }\n\n    protected filterItems(textarea: HTMLTextAreaElement): readonly User[] {\n        const search = this.getCurrentSearch(textarea).replace('@', '');\n\n        return this.getFilteredItems(this.items, search);\n    }\n\n    protected onClick(login: string, textarea: HTMLTextAreaElement): void {\n        const search = this.getCurrentSearch(textarea);\n        const value = this.value.replace(search, login);\n        const caret = value.indexOf(login) + login.length;\n\n        this.value = value;\n        textarea.focus();\n        textarea.value = value;\n        textarea.setSelectionRange(caret, caret);\n    }\n\n    @tuiPure\n    private getFilteredItems(items: readonly User[], search: string): readonly User[] {\n        return items.filter(\n            ({name, login}) => login.startsWith(search) || name.startsWith(search),\n        );\n    }\n\n    private getCurrentSearch(textarea: HTMLTextAreaElement): string {\n        return textarea.value.slice(textarea.value.indexOf('@'), textarea.selectionStart);\n    }\n}\n"}}]);