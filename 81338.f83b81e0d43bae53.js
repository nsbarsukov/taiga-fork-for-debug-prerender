"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[81338],{81338:n=>{n.exports="import {AsyncPipe, NgForOf, NgIf} from '@angular/common';\nimport {Component, inject} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {\n    TuiAxesComponent,\n    TuiLineChartComponent,\n    TuiLineDaysChartComponent,\n    TuiLineDaysChartHintDirective,\n} from '@taiga-ui/addon-charts';\nimport type {TuiDayLike, TuiMapper, TuiMatcher} from '@taiga-ui/cdk';\nimport {\n    TUI_IS_E2E,\n    TuiDay,\n    TuiDayRange,\n    TuiFilterPipe,\n    TuiMapperPipe,\n    TuiMonth,\n    tuiPure,\n} from '@taiga-ui/cdk';\nimport type {TuiPoint} from '@taiga-ui/core';\nimport {TUI_MONTHS, TuiNotificationComponent} from '@taiga-ui/core';\nimport {TuiInputDateRangeModule} from '@taiga-ui/legacy';\nimport type {Observable} from 'rxjs';\nimport {map, of} from 'rxjs';\n\n@Component({\n    standalone: true,\n    exportAs: \"ExampleComponent2\",\n    imports: [\n        TuiNotificationComponent,\n        TuiInputDateRangeModule,\n        FormsModule,\n        TuiAxesComponent,\n        NgForOf,\n        NgIf,\n        AsyncPipe,\n        TuiLineDaysChartHintDirective,\n        TuiLineDaysChartComponent,\n        TuiFilterPipe,\n        TuiLineChartComponent,\n        TuiMapperPipe,\n    ],\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    changeDetection,\n})\nexport default class ExampleComponent {\n    private readonly isE2E = inject(TUI_IS_E2E);\n    private readonly months$ = inject(TUI_MONTHS);\n\n    protected data = new TuiDayRange(\n        TuiDay.currentLocal(),\n        TuiDay.currentLocal().append({month: 5}),\n    );\n\n    protected show = this.data;\n\n    protected days = this.random(this.data);\n\n    protected readonly maxLength: TuiDayLike = {month: 6};\n\n    protected get range(): TuiDayRange {\n        return this.computeRange(this.show);\n    }\n\n    @tuiPure\n    protected getWidth({from, to}: TuiDayRange): number {\n        return TuiDay.lengthBetween(from, to);\n    }\n\n    @tuiPure\n    protected getDate(day: TuiDay | number, date: TuiDay): TuiDay {\n        return day instanceof TuiDay ? day : date.append({day});\n    }\n\n    @tuiPure\n    protected labels({from, to}: TuiDayRange): Observable<readonly string[]> {\n        const length = TuiDay.lengthBetween(from, to);\n\n        if (length > 90) {\n            return this.months$.pipe(\n                map(months =>\n                    Array.from(\n                        {length: TuiMonth.lengthBetween(from, to) + 1},\n                        (_, i) => months[from.append({month: i}).month],\n                    ),\n                ),\n            );\n        }\n\n        const range = Array.from({length}, (_, day) => from.append({day}));\n        const mondays = onlyMondays(range);\n        const days = range.map(String);\n\n        if (length > 60) {\n            return of(even(mondays));\n        }\n\n        if (length > 14) {\n            return of(mondays);\n        }\n\n        if (length > 7) {\n            return of(even(days));\n        }\n\n        return of(days);\n    }\n\n    protected readonly filter: TuiMatcher<[readonly [TuiDay, number], TuiDayRange]> = (\n        [day],\n        {from, to},\n    ) => day.daySameOrAfter(from) && day.daySameOrBefore(to);\n\n    protected readonly toNumbers: TuiMapper<\n        [ReadonlyArray<readonly [TuiDay, number]>, TuiDayRange],\n        readonly TuiPoint[]\n    > = (days, {from}) =>\n        days.map(([day, value]) => [TuiDay.lengthBetween(from, day), value]);\n\n    protected onDataChange(data: TuiDayRange): void {\n        this.days = this.random(data);\n    }\n\n    @tuiPure\n    private computeRange(range: TuiDayRange): TuiDayRange {\n        const {from, to} = range;\n        const length = TuiDay.lengthBetween(from, to);\n        const dayOfWeekFrom = from.dayOfWeek();\n        const dayOfWeekTo = to.dayOfWeek();\n        const mondayFrom = dayOfWeekFrom ? from.append({day: 7 - dayOfWeekFrom}) : from;\n        const mondayTo = dayOfWeekTo ? to.append({day: 7 - dayOfWeekTo}) : to;\n        const mondaysLength = TuiDay.lengthBetween(mondayFrom, mondayTo);\n\n        if (length > 90) {\n            return range;\n        }\n\n        if (length > 60) {\n            return new TuiDayRange(\n                mondayFrom,\n                mondayTo.append({day: mondaysLength % 14}),\n            );\n        }\n\n        if (length > 14) {\n            return new TuiDayRange(mondayFrom, mondayTo);\n        }\n\n        return new TuiDayRange(from, to.append({day: length % 2}));\n    }\n\n    @tuiPure\n    private generateRandomData(\n        {from, to}: TuiDayRange,\n        initial: number,\n    ): ReadonlyArray<[TuiDay, number]> {\n        return new Array(TuiDay.lengthBetween(from, to) + 1)\n            .fill(0)\n            .reduce<ReadonlyArray<[TuiDay, number]>>(\n                (array, _, i) => [\n                    ...array,\n                    [\n                        from.append({day: i}),\n                        this.isE2E\n                            ? initial\n                            : Math.max(\n                                  (i ? array[i - 1][1] : initial) +\n                                      Math.random() * 10 -\n                                      5,\n                                  0,\n                              ),\n                    ],\n                ],\n                [],\n            )\n            .filter(([day]) => day.dayOfWeek() < 5);\n    }\n\n    private random(data: TuiDayRange): ReadonlyArray<ReadonlyArray<[TuiDay, number]>> {\n        return [\n            this.generateRandomData(data, 100),\n            this.generateRandomData(data, 75),\n            this.generateRandomData(data, 50),\n        ];\n    }\n}\n\nfunction onlyMondays(range: readonly TuiDay[]): readonly string[] {\n    return range.filter(day => !day.dayOfWeek()).map(String);\n}\n\nfunction even<T>(array: readonly T[]): readonly T[] {\n    return array.filter((_, i) => !(i % 2));\n}\n"}}]);