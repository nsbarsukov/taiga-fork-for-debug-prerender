"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[73364],{73364:e=>{e.exports="import type {TemplateRef} from '@angular/core';\nimport {Component, inject, ViewChild} from '@angular/core';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport type {TuiSwipe} from '@taiga-ui/cdk';\nimport {tuiClamp, TuiSwipeDirective} from '@taiga-ui/cdk';\nimport type {TuiDialogContext} from '@taiga-ui/core';\nimport {TuiAlertService, TuiButtonDirective} from '@taiga-ui/core';\nimport {TuiPreview, TuiPreviewDialogService} from '@taiga-ui/kit';\nimport type {PolymorpheusContent} from '@tinkoff/ng-polymorpheus';\nimport {PolymorpheusModule} from '@tinkoff/ng-polymorpheus';\n\n@Component({\n    standalone: true,\n    exportAs: \"ExampleComponent1\",\n    imports: [TuiButtonDirective, TuiPreview, TuiSwipeDirective, PolymorpheusModule],\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    encapsulation,\n    changeDetection,\n})\nexport default class ExampleComponent {\n    private readonly previewService = inject(TuiPreviewDialogService);\n    private readonly alerts = inject(TuiAlertService);\n\n    @ViewChild('preview')\n    protected readonly preview?: TemplateRef<TuiDialogContext>;\n\n    @ViewChild('contentSample')\n    protected readonly contentSample?: TemplateRef<Record<string, unknown>>;\n\n    protected index = 0;\n    protected length = 2;\n    protected titles = ['Transaction cert.jpg', 'My face.jpg'];\n\n    protected get previewContent(): PolymorpheusContent {\n        return this.index === 0 && this.contentSample\n            ? this.contentSample\n            : 'https://avatars.githubusercontent.com/u/10106368';\n    }\n\n    protected show(): void {\n        this.previewService.open(this.preview || '').subscribe({\n            complete: () => console.info('complete'),\n        });\n    }\n\n    protected download(): void {\n        this.alerts.open('Downloading...').subscribe();\n    }\n\n    protected delete(): void {\n        this.alerts.open('Deleting...').subscribe();\n    }\n\n    protected onSwipe(swipe: TuiSwipe): void {\n        if (swipe.direction === 'left') {\n            this.index = tuiClamp(this.index + 1, 0, this.length - 1);\n        }\n\n        if (swipe.direction === 'right') {\n            this.index = tuiClamp(this.index - 1, 0, this.length - 1);\n        }\n    }\n}\n"}}]);