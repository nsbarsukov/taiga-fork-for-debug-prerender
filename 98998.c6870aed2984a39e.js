"use strict";(self.webpackChunkdemo=self.webpackChunkdemo||[]).push([[98998],{98998:e=>{e.exports="import {AsyncPipe, NgIf} from '@angular/common';\nimport {Component, inject, Injectable} from '@angular/core';\nimport {changeDetection} from '@demo/emulate/change-detection';\nimport {encapsulation} from '@demo/emulate/encapsulation';\nimport type {TuiHandler} from '@taiga-ui/cdk';\nimport {TuiLoaderComponent} from '@taiga-ui/core';\nimport {\n    TUI_TREE_LOADER,\n    TUI_TREE_LOADING,\n    TUI_TREE_START,\n    TuiTree,\n    type TuiTreeLoader,\n    TuiTreeService,\n} from '@taiga-ui/kit';\nimport type {Observable} from 'rxjs';\nimport {map, timer} from 'rxjs';\n\ninterface Item {\n    readonly children?: boolean;\n    readonly text: string;\n}\n\n@Injectable()\nclass TreeLoader implements TuiTreeLoader<Item> {\n    public loadChildren({text}: Item): Observable<Item[]> {\n        return timer(3000).pipe(\n            map(() => [\n                {text: `${text} 1`, children: Math.random() > 0.5},\n                {text: `${text} 2`, children: Math.random() > 0.5},\n                {text: `${text} 3`, children: Math.random() > 0.5},\n            ]),\n        );\n    }\n\n    public hasChildren({children}: Item): boolean {\n        return !!children;\n    }\n}\n\n@Component({\n    standalone: true,\n    exportAs: \"ExampleComponent7\",\n    imports: [TuiTree, TuiLoaderComponent, NgIf, AsyncPipe],\n    templateUrl: './index.html',\n    styleUrls: ['./index.less'],\n    encapsulation,\n    changeDetection,\n    providers: [\n        TuiTreeService,\n        {\n            provide: TUI_TREE_START,\n            useValue: {text: 'Topmost'},\n        },\n        {\n            provide: TUI_TREE_LOADER,\n            useClass: TreeLoader,\n        },\n    ],\n})\nexport default class ExampleComponent {\n    protected readonly loading = inject(TUI_TREE_LOADING);\n    protected readonly service = inject(TuiTreeService<Item>);\n\n    protected map = new Map<Item, boolean>();\n\n    protected childrenHandler: TuiHandler<Item, readonly Item[]> = item =>\n        this.service.getChildren(item);\n\n    protected onToggled(item: Item): void {\n        this.service.loadChildren(item);\n    }\n}\n"}}]);